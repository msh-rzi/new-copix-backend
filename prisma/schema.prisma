generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id               String          @id @default(uuid())
  email            String          @unique
  password         String?
  previousPassword String?
  provider         String?
  socialId         String?
  firstName        String?
  lastName         String?
  photo            String?
  role             String?
  status           String?
  createdAt        DateTime?       @default(now())
  updatedAt        DateTime?       @updatedAt
  deletedAt        DateTime?
  refreshToken     String?
  userExchanges    UserExchanges[]
  UserTelegram     UserTelegram[]
  Algorithm        Algorithm[]
  UserRobots       UserRobots[]
}

model UserRobots {
  id           String    @id @default(uuid())
  active       Boolean   @default(true)
  user         Users     @relation(fields: [usersId], references: [id])
  usersId      String
  robot        Robots    @relation(fields: [robotsId], references: [id])
  robotsId     String
  createdAt    DateTime? @default(now())
  startedAt    DateTime? @updatedAt
  canceledAt   DateTime?
  cancelReason String?
}

model Robots {
  id          String       @id @default(uuid())
  name        String
  description String
  path        String       @default("")
  active      Boolean      @default(true)
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @updatedAt
  UserRobots  UserRobots[]
}

model Exchange {
  id               String          @id
  name             String
  year_established Int
  country          String?
  description      String?
  image            String
  userExchanges    UserExchanges[]
  Algorithm        Algorithm[]
}

model UserExchanges {
  id         Int       @id @default(autoincrement())
  name       String
  user       Users     @relation(fields: [userId], references: [id])
  userId     String
  exchange   Exchange  @relation(fields: [exchangeId], references: [id])
  exchangeId String
  apiKey     String
  apiSecret  String
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model Algorithm {
  id             Int       @id @default(autoincrement())
  algorithmName  String
  user           Users     @relation(fields: [usersId], references: [id])
  usersId        String
  exchange       Exchange  @relation(fields: [exchangeId], references: [id])
  exchangeId     String
  algorithm      String
  channelId      String
  purchaseVolume String
  purchaseType   String
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt
}

model UserTelegram {
  id           Int       @id @default(autoincrement())
  telegramId   BigInt
  username     String?
  profilePhoto String?
  session      String    @default("")
  user         Users     @relation(fields: [usersId], references: [id])
  usersId      String
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
}

model Coin {
  id             String                @id @unique
  symbol         String                @unique
  name           String
  imageUrl       String?               @map("image_url")
  marketCapRank  Int?                  @map("market_cap_rank")
  createdAt      DateTime              @default(now()) @map("created_at")
  updatedAt      DateTime              @updatedAt @map("updated_at")
  coinPrices     CoinPrice[]
  historicalData CoinHistoricalPrice[]
}

model CoinPrice {
  id        Int      @id @default(autoincrement())
  coinId    String   @map("coin_id")
  priceUsd  Decimal  @map("price_usd")
  volume24h Decimal? @map("volume_24h")
  marketCap Decimal? @map("market_cap")
  change24h Decimal? @map("change_24h")
  timestamp DateTime @default(now())

  coin Coin @relation(fields: [coinId], references: [id], onDelete: Cascade)
}

model CoinHistoricalPrice {
  id        Int      @id @default(autoincrement())
  coinId    String   @map("coin_id")
  date      DateTime
  open      Decimal
  high      Decimal
  low       Decimal
  close     Decimal
  volume    Decimal?
  marketCap Decimal? @map("market_cap")

  coin Coin @relation(fields: [coinId], references: [id], onDelete: Cascade)

  @@map("HistoricalPrice")
}
